<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ebpf on Maxgio&#39;s blog</title>
    <link>https://blog.maxgio.me/tags/ebpf/</link>
    <description>Recent content in ebpf on Maxgio&#39;s blog</description>
    <image>
      <url>https://blog.maxgio.me/papermod-cover.png</url>
      <link>https://blog.maxgio.me/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 23 Jun 2024 21:00:00 +0200</lastBuildDate><atom:link href="https://blog.maxgio.me/tags/ebpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unleashing the power of frame pointers for profilers pt.1 - The execution environment</title>
      <link>https://blog.maxgio.me/posts/unleashing-power-frame-poiners-execution-environment/</link>
      <pubDate>Sun, 23 Jun 2024 21:00:00 +0200</pubDate>
      
      <guid>https://blog.maxgio.me/posts/unleashing-power-frame-poiners-execution-environment/</guid>
      <description>Profiling the CPU allows us to analyze the program&amp;rsquo;s performance, identify bottlenecks, and optimize its efficiency.
Have you ever wondered what happens behind the scenes when you run a program and how to account for CPU time for the actual program functions? And even more, how to write such a tool to profile the program?
Even though great open-source projects provide continuous profiling with vast support for compiled, JITed, and interpreted, languages, with or without debug info, with or without frame pointers, etc.</description>
    </item>
    
  </channel>
</rss>
